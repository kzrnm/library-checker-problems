from logging import basicConfig, getLogger
import time
from generate import main

logger = getLogger(__name__)

tasks = [
    "datastructure/area_of_union_of_rectangles",
    "datastructure/associative_array",
    "datastructure/deque_operate_all_composite",
    "datastructure/double_ended_priority_queue",
    "datastructure/dynamic_graph_vertex_add_component_sum",
    "datastructure/dynamic_sequence_range_affine_range_sum",
    "datastructure/dynamic_tree_subtree_add_subtree_sum",
    "datastructure/dynamic_tree_vertex_add_path_sum",
    "datastructure/dynamic_tree_vertex_add_subtree_sum",
    "datastructure/dynamic_tree_vertex_set_path_composite",
    "datastructure/line_add_get_min",
    "datastructure/longest_increasing_subsequence",
    "datastructure/number_of_subsequences",
    "datastructure/persistent_queue",
    "datastructure/persistent_unionfind",
    "datastructure/point_add_range_sum",
    "datastructure/point_add_rectangle_sum",
    "datastructure/point_set_range_composite",
    "datastructure/point_set_range_sort_range_composite",
    "datastructure/predecessor_problem",
    "datastructure/queue_operate_all_composite",
    "datastructure/range_affine_point_get",
    "datastructure/range_affine_range_sum",
    "datastructure/range_chmin_chmax_add_range_sum",
    "datastructure/range_kth_smallest",
    "datastructure/rectangle_sum",
    "datastructure/segment_add_get_min",
    "datastructure/set_xor_min",
    "datastructure/static_range_frequency",
    "datastructure/static_range_inversions_query",
    "datastructure/static_range_lis_query",
    "datastructure/static_range_sum",
    "datastructure/static_rectangle_add_rectangle_sum",
    "datastructure/staticrmq",
    "datastructure/unionfind",
    "datastructure/vertex_add_path_sum",
    "datastructure/vertex_add_subtree_sum",
    "datastructure/vertex_set_path_composite",
    "geo/convex_layers",
    "geo/sort_points_by_argument",
    "graph/assignment",
    "graph/biconnected_components",
    "graph/bipartite_edge_coloring",
    "graph/bipartitematching",
    "graph/cartesian_tree",
    "graph/chordal_graph_recognition",
    "graph/chromatic_number",
    "graph/common_interval_decomposition_tree",
    "graph/cycle_detection",
    "graph/cycle_detection_undirected",
    "graph/directedmst",
    "graph/dominatortree",
    "graph/enumerate_cliques",
    "graph/enumerate_triangles",
    "graph/frequency_table_of_tree_distance",
    "graph/general_matching",
    "graph/general_weighted_matching",
    "graph/global_minimum_cut_of_dynamic_star_augmented_graph",
    "graph/jump_on_tree",
    "graph/k_shortest_walk",
    "graph/lca",
    "graph/manhattanmst",
    "graph/maximum_independent_set",
    "graph/min_cost_b_flow",
    "graph/rooted_tree_isomorphism_classification",
    "graph/scc",
    "graph/shortest_path",
    "graph/three_edge_connected_components",
    "graph/tree_decomposition_width_2",
    "graph/tree_diameter",
    "graph/two_edge_connected_components",
    "graph/vertex_add_range_contour_sum_on_tree",
    "math/bernoulli_number",
    "math/binomial_coefficient",
    "math/bitwise_and_convolution",
    "math/bitwise_xor_convolution",
    "math/characteristic_polynomial",
    "math/composition_of_formal_power_series",
    "math/convolution_mod",
    "math/convolution_mod_1000000007",
    "math/convolution_mod_2_64",
    "math/convolution_mod_large",
    "math/counting_primes",
    "math/discrete_logarithm_mod",
    "math/division_of_polynomials",
    "math/enumerate_primes",
    "math/exp_of_formal_power_series",
    "math/exp_of_formal_power_series_sparse",
    "math/factorize",
    "math/find_linear_recurrence",
    "math/gcd_convolution",
    "math/hafnian_of_matrix",
    "math/inv_of_formal_power_series",
    "math/inv_of_formal_power_series_sparse",
    "math/inv_of_polynomials",
    "math/inverse_matrix",
    "math/kth_root_integer",
    "math/kth_root_mod",
    "math/kth_term_of_linearly_recurrent_sequence",
    "math/lcm_convolution",
    "math/log_of_formal_power_series",
    "math/log_of_formal_power_series_sparse",
    "math/matrix_det",
    "math/matrix_det_arbitrary_mod",
    "math/matrix_product",
    "math/min_of_mod_of_linear",
    "math/montmort_number_mod",
    "math/mul_mod2n_convolution",
    "math/multipoint_evaluation",
    "math/multivariate_convolution",
    "math/nim_product_64",
    "math/partition_function",
    "math/polynomial_interpolation",
    "math/polynomial_taylor_shift",
    "math/pow_of_formal_power_series",
    "math/pow_of_formal_power_series_sparse",
    "math/primitive_root",
    "math/product_of_polynomial_sequence",
    "math/sharp_p_subset_sum",
    "math/shift_of_sampling_points_of_polynomial",
    "math/sparse_matrix_det",
    "math/sqrt_mod",
    "math/sqrt_of_formal_power_series",
    "math/sqrt_of_formal_power_series_sparse",
    "math/stirling_number_of_the_first_kind",
    "math/stirling_number_of_the_first_kind_small_p_large_n",
    "math/stirling_number_of_the_second_kind",
    "math/stirling_number_of_the_second_kind_small_p_large_n",
    "math/subset_convolution",
    "math/sum_of_exponential_times_polynomial",
    "math/sum_of_exponential_times_polynomial_limit",
    "math/sum_of_floor_of_linear",
    "math/sum_of_totient_function",
    "math/system_of_linear_equations",
    "math/tetration_mod",
    "math/two_sat",
    "sample/aplusb",
    "sample/many_aplusb",
    "string/enumerate_palindromes",
    "string/number_of_substrings",
    "string/prefix_substring_lcs",
    "string/runenumerate",
    "string/suffixarray",
    "string/zalgorithm",
]

basicConfig(
    format="%(asctime)s {name}[%(levelname)s] %(message)s",
    datefmt="%H:%M:%S",
    level='INFO',
)

with open('result.md', 'w') as fp:
    print("# generation times", file=fp)
    print("", file=fp)
    print("|task|time [ms] |", file=fp)
    print("|:---|---:|", file=fp)
    for t in tasks:
        p = t.split('/')[1]
        print(f"::group::Start {t}")
        start = time.perf_counter()
        main(["-p", p])
        end = time.perf_counter()
        print("::endgroup::")
        elapsed = end - start

        print(f"{t} {elapsed}ms")
        print(f"|{t}|{elapsed}|", file=fp)
